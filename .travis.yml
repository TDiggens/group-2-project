language: java

sudo: false

addons:
  hosts:
    - data

env:
  global:
    - CLOUDSDK_CORE_DISABLE_PROMPTS=1

services:
  - docker

install:
  - docker build -t database data/.
  - docker run --rm -d -e MYSQL_ROOT_PASSWORD=example -p 33060:3306 database
  - mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V

before_script:
  - mvn clean

jobs:
  include:
    # Unit test stage.
    - stage: unit tests
      install: skip
      jdk: oraclejdk11
    # Tell Maven to run the unit tests.
      script: mvn test -Dtest=com.napier.sem.SanityCheckTest
    # Integration test stage.
    - stage: integration tests
      jdk: oraclejdk11
    # Tell Maven to run the integration tests.
      script: mvn test -Dtest=com.napier.sem.SanityIntegrationCheckTests
    # Github release stage.
    - stage: GitHub Release
      install: skip
      jdk: oraclejdk11
      script:
        - echo "Deploying to GitHub Releases"
        # Package the application.
        - mvn package -DskipTests=true -Dmaven.javadoc.skip=true
      before_deploy:
      # Set our git username and email.
      - git config --local user.name "TDiggens"
      - git config --local user.email "40203272@live.napier.ac.uk"
      # Create unique tag for thc commit.
      - export TRAVIS_TAG=${TRAVIS_TAG:-$(date +'%Y-%m-%d')-$(git log --format=%h -1)}
      # Tag the commit
      - git tag $TRAVIS_TAG
    # Travis Deployment stage.
      deploy:
        provider: releases
        # Token saved on Travis.
        api_key: "$GITHUB_OAUTH_TOKEN"
        # File to add to the release.
        file: "$TRAVIS_BUILD_DIR/target/group-2-project.jar"
        skip_cleanup: true
    # Google Cloud Deployment stage.
    - stage: Google Cloud Deploy
      install: skip
      jdk: oraclejdk11
      before_script:
        # Check if Google Cloud SDK is installed.
        - if [ ! -d ${HOME}/google-cloud-sdk ]; then curl https://sdk.cloud.google.com | bash
          > /dev/null; fi
        - source $HOME/google-cloud-sdk/path.bash.inc
        # Install Kubernetes control to manage containers.
        - gcloud components install kubectl
        - gcloud version
        # Login to our Google Cloud Account using credentials file.
        - gcloud auth activate-service-account --key-file client-secret.json
      script:
        # Set the project we will work in.
        - gcloud config set project semgroup2
        # Set the zone to work in.
        - gcloud config set compute/zone europe-west2-b
        # Assign project ID to a variable to make life easier.
        - export PROJECT_ID="$(gcloud config get-value project -q)"
        # Authenticate against Google's Docker image manager.
        - gcloud auth configure-docker
        # Build the database image.
        - docker build -t gcr.io/${PROJECT_ID}/data data/.
        # Push the database image.
        - docker push gcr.io/${PROJECT_ID}/data
        # Create a container cluster. We only need one node.
        - gcloud container clusters create hr-cluster --num-nodes=1
        # Tell kubernetes to run the built database image, opening port 3306.
        - kubectl run hr --image=gcr.io/${PROJECT_ID}/data --port 3306
        # Expose the cluster to the Internet, mapping external port 3306 to internal port 3306.
        - kubectl expose deployment hr --port=3306 --target-port=3306 --type=LoadBalancer


stages:
  - unit tests
  - integration tests
  - name: GitHub Release
    if: branch = master
  - name: Google Cloud Deploy
    if: branch = master

after_success:
# Push code coverage data to codecov.
- bash <(curl -s https://codecov.io/bash)

before_install:
# Decrypts the credentials file.
  - openssl aes-256-cbc -K $encrypted_5e677d24309c_key -iv $encrypted_5e677d24309c_iv
    - in client-secret.json.enc -out client-secret.json -d

script: "mvn cobertura:cobertura"

<plugin>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>cobertura-maven-plugin</artifactId>
  <version>2.7</version>
  <configuration>
    <formats>
      <format>html</format>
      <format>xml</format>
    </formats>
   <check />
  </configuration>
</plugin>


